<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="6$7e=!4uoDs_La,jcDp6" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="|Rn}_40w*XXxi,UB4-R{" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum BMP280_I2C_ADDRESS {" line1="    //% block=&quot;0x76&quot;" line2="    ADDR_0x76 = 0x76," line3="    //% block=&quot;0x77&quot;" line4="    ADDR_0x77 = 0x77" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="xE.s0[+(#S^Q2t8}.u)J" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace BMP280 {" line1="    let BMP280_I2C_ADDR = BMP280_I2C_ADDRESS.ADDR_0x76" line2="" line3="    function setreg(reg: number, dat: number): void {" line4="        let buf = pins.createBuffer(2);" line5="        buf[0] = reg;" line6="        buf[1] = dat;" line7="        pins.i2cWriteBuffer(BMP280_I2C_ADDR, buf);" line8="    }" line9="" line10="    function getreg(reg: number): number {" line11="        pins.i2cWriteNumber(BMP280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line12="        return pins.i2cReadNumber(BMP280_I2C_ADDR, NumberFormat.UInt8BE);" line13="    }" line14="" line15="    function getUInt16LE(reg: number): number {" line16="        pins.i2cWriteNumber(BMP280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line17="        return pins.i2cReadNumber(BMP280_I2C_ADDR, NumberFormat.UInt16LE);" line18="    }" line19="" line20="    function getInt16LE(reg: number): number {" line21="        pins.i2cWriteNumber(BMP280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line22="        return pins.i2cReadNumber(BMP280_I2C_ADDR, NumberFormat.Int16LE);" line23="    }" line24="" line25="    let dig_T1 = getUInt16LE(0x88)" line26="    let dig_T2 = getInt16LE(0x8A)" line27="    let dig_T3 = getInt16LE(0x8C)" line28="    let dig_P1 = getUInt16LE(0x8E)" line29="    let dig_P2 = getInt16LE(0x90)" line30="    let dig_P3 = getInt16LE(0x92)" line31="    let dig_P4 = getInt16LE(0x94)" line32="    let dig_P5 = getInt16LE(0x96)" line33="    let dig_P6 = getInt16LE(0x98)" line34="    let dig_P7 = getInt16LE(0x9A)" line35="    let dig_P8 = getInt16LE(0x9C)" line36="    let dig_P9 = getInt16LE(0x9E)" line37="    setreg(0xF4, 0x2F)" line38="    setreg(0xF5, 0x0C)" line39="    let T = 0" line40="    let P = 0" line41="" line42="    function get(): void {" line43="        let adc_T = (getreg(0xFA) &lt;&lt; 12) + (getreg(0xFB) &lt;&lt; 4) + (getreg(0xFC) &gt;&gt; 4)" line44="        let var1 = (((adc_T &gt;&gt; 3) - (dig_T1 &lt;&lt; 1)) * dig_T2) &gt;&gt; 11" line45="        let var2 = (((((adc_T &gt;&gt; 4) - dig_T1) * ((adc_T &gt;&gt; 4) - dig_T1)) &gt;&gt; 12) * dig_T3) &gt;&gt; 14" line46="        let t = var1 + var2" line47="        T = Math.idiv(((t * 5 + 128) &gt;&gt; 8), 100)" line48="        var1 = (t &gt;&gt; 1) - 64000" line49="        var2 = (((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 11) * dig_P6" line50="        var2 = var2 + ((var1 * dig_P5) &lt;&lt; 1)" line51="        var2 = (var2 &gt;&gt; 2) + (dig_P4 &lt;&lt; 16)" line52="        var1 = (((dig_P3 * ((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 13) &gt;&gt; 3) + (((dig_P2) * var1) &gt;&gt; 1)) &gt;&gt; 18" line53="        var1 = ((32768 + var1) * dig_P1) &gt;&gt; 15" line54="        if (var1 == 0)" line55="            return; // avoid exception caused by division by zero" line56="        let adc_P = (getreg(0xF7) &lt;&lt; 12) + (getreg(0xF8) &lt;&lt; 4) + (getreg(0xF9) &gt;&gt; 4)" line57="        let _p = ((1048576 - adc_P) - (var2 &gt;&gt; 12)) * 3125" line58="        _p = Math.idiv(_p, var1) * 2;" line59="        var1 = (dig_P9 * (((_p &gt;&gt; 3) * (_p &gt;&gt; 3)) &gt;&gt; 13)) &gt;&gt; 12" line60="        var2 = (((_p &gt;&gt; 2)) * dig_P8) &gt;&gt; 13" line61="        P = _p + ((var1 + var2 + dig_P7) &gt;&gt; 4)" line62="    }" line63="" line64="    /**" line65="     * get pressure" line66="     */" line67="    //% blockId=&quot;BMP280_GET_PRESSURE&quot; block=&quot;get pressures&quot;" line68="    //% weight=80 blockGap=8" line69="    export function pressure(): number {" line70="        get();" line71="        return P;" line72="    }" line73="" line74="    /**" line75="     * get temperature" line76="     */" line77="    //% blockId=&quot;BMP280_GET_TEMPERATURE&quot; block=&quot;get temperature&quot;" line78="    //% weight=80 blockGap=8" line79="    export function temperature(): number {" line80="        get();" line81="        return T;" line82="    }" line83="" line84="    /**" line85="     * power on" line86="     */" line87="    //% blockId=&quot;BMP280_POWER_ON&quot; block=&quot;Power On&quot;" line88="    //% weight=61 blockGap=8" line89="    export function PowerOn() {" line90="        setreg(0xF4, 0x2F)" line91="    }" line92="" line93="    /**" line94="     * power off" line95="     */" line96="    //% blockId=&quot;BMP280_POWER_OFF&quot; block=&quot;Power Off&quot;" line97="    //% weight=60 blockGap=8" line98="    export function PowerOff() {" line99="        setreg(0xF4, 0)" line100="    }" line101="" line102="    /**" line103="     * set I2C address" line104="     */" line105="    //% blockId=&quot;BMP280_SET_ADDRESS&quot; block=&quot;set address %addr&quot;" line106="    //% weight=50 blockGap=8" line107="    export function Address(addr: BMP280_I2C_ADDRESS) {" line108="        BMP280_I2C_ADDR = addr" line109="    }" line110="}" numlines="111"></mutation><next><block type="typescript_statement" id="gOHf!#unr*nq/EXNbDLS" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace NEO6M {" line1="    export function parseRMC(sentence: string) {" line2="        // serial.writeLine(&quot;Parts:&quot; + sentence);" line3="        parts = sentence.split(&quot;,&quot;)" line4="        date = parts[9]" line5="    }" line6="    function parseGPSData(data: string) {" line7="        lines = data.split(&quot;$&quot;)" line8="        for (let line of lines) {" line9="            if (line.charAt(0) == &quot;G&quot; &amp;&amp; line.charAt(1) == &quot;P&quot; &amp;&amp; line.charAt(2) == &quot;G&quot; &amp;&amp; line.charAt(3) == &quot;G&quot; &amp;&amp; line.charAt(4) == &quot;A&quot;) {" line10="                parseGGA(line)" line11="                serial.writeLine(&quot;GGA - Time: &quot; + time + &quot; Lat: &quot; + lat + &quot; Lon: &quot; + lon + &quot; Satellites: &quot; + satellites + &quot; Alttitude: &quot; + alltitude)" line12="            } else if (line.charAt(0) == &quot;G&quot; &amp;&amp; line.charAt(1) == &quot;P&quot; &amp;&amp; line.charAt(2) == &quot;R&quot; &amp;&amp; line.charAt(3) == &quot;M&quot; &amp;&amp; line.charAt(4) == &quot;C&quot;) {" line13="                parseRMC(line)" line14="                serial.writeLine(&quot;RMC - Time: &quot; + time + &quot; Date: &quot; + date + &quot; Lat: &quot; + lat + &quot; Lon: &quot; + lon)" line15="            }" line16="        }" line17="    }" line18="    function parseGGA(sentence: string) {" line19="        parts = sentence.split(&quot;,&quot;)" line20="        time = parts[1]" line21="        lat = &quot;&quot; + parts[2].substr(0, 2) + &quot; &quot; + parts[2].substr(2, parts[2].length) + parts[3]" line22="        lon = &quot;&quot; + parts[4].substr(0, 3) + &quot; &quot; + parts[4].substr(3, parts[2].length) + parts[5]" line23="        satellites = parseInt(parts[7])" line24="        alltitude = parseInt(parts[9])" line25="    }" line26="" line27="    // Function to read data from the GPS module for a short duration" line28="    function collectGPSData() {" line29="        let buff: Buffer" line30="        startTime = input.runningTime()" line31="        while (input.runningTime() - startTime &lt; 1100) {" line32="            buff = serial.readBuffer(1)" line33="            collectedData = &quot;&quot; + collectedData + buff.toString()" line34="        }" line35="    }" line36="" line37="    let alltitude: number" line38="    let parts3: string[] = []" line39="    let collectedData = &quot;&quot;" line40="    let startTime = 0" line41="    let dotPos = 0" line42="    let satellites = 0" line43="    let lines: string[] = []" line44="    let date = &quot;&quot;" line45="    let time = &quot;&quot;" line46="    let parts: string[] = []" line47="    let totalSatellites = &quot;&quot;" line48="    let gsvData = 0" line49="    let rmcData = 0" line50="    let ggaData = 0" line51="    let parts2: number[] = []" line52="    let time2 = &quot;&quot;" line53="    let gpsData = &quot;&quot;" line54="    let lon: string" line55="    let lat: string" line56="}" numlines="57"></mutation></block></next></block></next></block></statement></block></xml>